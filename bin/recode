#!/bin/env bash
source functions.sh

show_help() {
    cat >&2 << EOM
USAGE:   $(basename $0) [OPTIONS] [FORMAT]

OPTIONS:
   -h            Show this help
   FORMAT        Set the output format 'array', 'php', 'json', 'Json'
EOM
}

while getopts "h" args; do
    case "$args" in
        h)  die "$(show_help)" 2 ;;
        \?) die "$(show_help)" 2 ;;
    esac
done

if [ $# -gt 0 ]; then
    # Use the last argument as the output format.
    output=${*: -1:1}
else
    output='array'
fi

# Read stdin into variable
content="$(cat)"

# Check if we got content to process.
if [ "$content" = "" ]; then
    write_error "No content read from stdin."
    exit 1
fi

# Prepare the php code to do the conversion.
code=$(cat <<EOM
// Use HEREDOC to avoid issue with different used quotes in the input string.
\$s    = <<<'EOS'
$content
EOS;
\$out  = '$output';
\$d = [];

// Try to unserialize first - if this fails try to json decode or use the input direct.
if (false === (\$d = @unserialize(\$s)) && serialize(false) !== \$s) {
    if (null === (\$d = @json_decode(\$s, true)) && json_encode(null) !== \$s) {
        \$d = (array)\$s;
    }
}

// Process the output
switch(\$out) {
    case 'php':
        echo serialize(\$d);
        break;
    case 'array':
        var_export(\$d);
        break;
    case 'json':
        echo json_encode(\$d);
        break;
    case 'Json':
        echo json_encode(\$d, JSON_UNESCAPED_SLASHES|JSON_PRETTY_PRINT);
        break;
}
EOM
)
php -r "$code"
