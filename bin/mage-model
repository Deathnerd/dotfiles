#!/usr/bin/env bash
# This scripts reads some configuration from stdin and creates magento models,
# resource model and collection models from it.

# use the directory from where the script is called
CONFIG_FILE=".config.sh"
BASE_DIR="$(readlink -fn -- `pwd`)"

source functions.sh

# check if the config could be found and include it
if [ -f "$BASE_DIR/$CONFIG_FILE" ]; then
    source "$BASE_DIR/$CONFIG_FILE"
fi

# show the usage and help message
show_help() {
    echo "USAGE:   $(basename $0) [OPTIONS]"
    echo ""
    echo "OPTIONS: will overwrite settings done in $CONFIG_FILE"
    echo "         located in the directory where this script is run from."
    echo ""
    echo "   -b    Base-Path of the project (Magento Root)"
    echo "   -c    Code-Pool to create the files in (core, community, local)"
    echo "   -d    Dry-Run don't create files"
    echo "   -h    Show this help"
    echo "   -m    Module name"
    echo "   -n    Name-Space for the model classes"
    echo "   -u    User name for the doc block"
    echo "   -x    Show current configuration"
    echo ""
    echo "FORMAT: {Model} {Table_Identifier} {Id_Field} [{Field} {...}]"
    echo ""
    echo "Model             Model name or Model_Path"
    echo "Table_Identifier  Table identifier referencing config.xml like modul/table_name"
    echo "Id_Field          Name of the tables id field"
    echo "Field             Tupel as field_name#type for example user_name#string"
}

# show set configuration options
print_config() {
    message_head "Config"
    write_info "BASE_PATH:    $BASE_PATH"
    write_info "CODE_POOL:    $CODE_POOL"
    write_info "NAME_SPACE:   $NAME_SPACE"
    write_info "MODULE:       $MODULE"
    write_info "NAME:         $NAME"
    write_info "DRY_RUN:      $DRY_RUN"
    echo ""
}

if [ $# -lt 1 ]; then
    die "$(show_help)" 2
fi
# process options to configure global settings
while getopts "b:c:dhm:n:u:x?" Option; do
    case $Option in
        b )  BASE_PATH=$OPTARG ;;
        c )  CODE_POOL=$OPTARG ;;
        d )  DRY_RUN=1 ;;
        h )  die "$(show_help)" 2 ;;
        m )  MODULE=$OPTARG ;;
        n )  NAME_SPACE=$OPTARG ;;
        u )  NAME=$OPTARG ;;
        x )  die "$(print_config)" 2 ;;
        \? ) die "$(show_help)" 2 ;;
    esac
done

# assigne default configurations
BASE_PATH=${BASE_PATH:-"$BASE_DIR"}
NAME=${NAME:-"$USER"}
CODE_POOL=${CODE_POOL:-"local"}
NAME_SPACE=${NAME_SPACE:-"Dotsource"}
MODULE=${MODULE:-""}
DRY_RUN=${DRY_RUN:-0}

source mage-base.sh

# check required options
if [ "$MODULE" = "" ]; then
    show_help
    echo ""
    write_error "No module specified"
    exit 1
fi

# prepare some global used variables
MODEL_PATH="$MODULE_PATH/Model"

# build the getter and setter mehtods.
#
# @param string Full class name
# @param string name of the database field
# @param string data type of the field (integer, string, ...)
get_methods()
{
    local class_name="$1"
    local attribute_name="$2"
    local type="$3"
    local var_name=($(camelize "$attribute_name"))
    local set_method_name=($(camelize "set $attribute_name"))
    local get_method_name=($(camelize "get $attribute_name"))
    local setter_doc_block="

    /**
     * Set the value for field $attribute_name.
     *
     * @param   $type \$$var_name
     * @return  $class_name
     */
    public function $set_method_name(\$$var_name)
    {
        return \$this->setData('$attribute_name', \$$var_name);
    }

    /**
     * Retrieves the value of field $attribute_name.
     *
     * @return  $type|null
     */
    public function $get_method_name()
    {
        return \$this->_getData('$attribute_name');
    }"

    echo -e "$setter_doc_block"
}

# generates the model class content
#
# @param string Data {Path_Of_Model} {table/identifier} {id_field_name} {field_name#type tupel}+
create_model_class() {
    local array=($(echo "$1"))
    local path="${array[0]}"
    local class_name="${NAME_SPACE}_${MODULE}_Model_${path}"

    local file_path="$MODEL_PATH/$(echo "$path" | tr _ /).php"
    local dir_path=`dirname "$file_path"`
    local model_identifier=($(echo "${MODULE}/$path" | sed -e 's/.*/\L&\E/'))

    # check the number of input params
    count="${#array[@]}"
    if [ $count -lt 3 ]; then
        echo "Invalid input format - at least 3 params required"
        exit 1
    fi

    # generate the class dock block
    local str="$PHPDOCBLOCK

class $class_name
    extends Mage_Core_Model_Abstract
{

    /**
     * Standard model pseudo constructor.
     *
     * @return  null
     */
    protected function _construct()
    {
        parent::_construct();
        \$this->_init('$model_identifier');
    }"

    # generate all getters and setters
    IFS='#'
    for ((i = 3; i < count; i++))
    do
        field_data=($(echo "${array[$i]}"))
        if [ ${#field_data[@]} -ne 2 ]
        then
            echo "Invalid input format - attribute '${field_data[0]}' has no type"
            exit 1
        fi
        # generate method name
        name="${field_data[0]}"
        type="${field_data[1]}"
        methods=($(get_methods "$class_name" "$name" "$type"))

        str+="$methods"
    done
    unset IFS

    str=$(echo -e "${str}\n}")
    create_file_with_content "$file_path" "$str"
}

# generates the ressource model class content
#
# @param string Data {Path_Of_Model} {table/identifier} {id_field_name} {field_name#type tupel}+
create_ressource_model_class() {
    local array=($(echo "$1"))
    local class_name="${NAME_SPACE}_${MODULE}_Model_Resource_${array[0]}"

    local file_path="$MODEL_PATH/Resource/$(echo "${array[0]}" | tr _ /).php"
    local dir_path=`dirname "$file_path"`

    # generate the class dock block
    local str="$PHPDOCBLOCK

class $class_name
    extends Mage_Core_Model_Resource_Db_Abstract
{

    /**
     * Resource models pseudo constructor.
     *
     * @return  null
     */
    protected function _construct()
    {
        \$this->_init('${array[1]}', '${array[2]}');
    }
}"

    create_file_with_content "$file_path" "$str"
}

# generates the collection model class content
#
# @param string Data {Path_Of_Model} {table/identifier} {id_field_name} {field_name#type tupel}+
create_collection_model_class() {
    local array=($(echo "$1"))
    local path="${array[0]}"
    local class_name="${NAME_SPACE}_${MODULE}_Model_Resource_${path}_Collection"
    local model_identifier=($(echo "${MODULE}/$path" | sed -e 's/.*/\L&\E/'))

    local file_path="$MODEL_PATH/Resource/$(echo "${array[0]}" | tr _ /)/Collection.php"
    local dir_path=`dirname "$file_path"`
    # generate the class dock block
    local str="$PHPDOCBLOCK

class $class_name
    extends Mage_Core_Model_Resource_Db_Collection_Abstract
{

    /**
     * Standard collection model pseudo constructor.
     *
     * @return  null
     */
    protected function _construct()
    {
        parent::_construct();
        \$this->_init('$model_identifier');
    }
}"

    create_file_with_content "$file_path" "$str"
}

print_config

# read from sdtin
while read line; do
    create_model_class "$line"
    create_ressource_model_class "$line"
    create_collection_model_class "$line"
done
