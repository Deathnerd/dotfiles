#!/usr/bin/env bash
# Edit the following two variables to your needs
#
# $PASSFILE optimally should contain an absolute path, because it is not
# guaranteed that the script gets called from the same directory
# The plain password file contains entries in the form sitename|user|password
# and may be encrypted with the following command:
#
# gpg -e -r <gpg_identity> <password_file>
#
# $GPGKEY is your personal GPG identity you want to
# crypt the password file with.

PASSDIR=~/.passman
GPGKEY=${GPGKEY:-""}
CLIPBOARD_TIMEOUT=7

source functions.sh

_help() {
    cat <<EOM
USAGE:   $(basename $0) [COMMAND] [PATH] [USER]

COMMAND:
    help    Show this help message.
    list    Show the available password stores.
    tree    Show the available password stores in tree view
    get     Show data of password store and yank the password into clipboard.
    add     Add/Update a password store.
EOM
}

# retrieves the path to the storage file or an subdirectory
# param1 indicates if the directory should be created {0,1}
# param2 possible subpath
_getPath() {
    local path="$PASSDIR/$2"
    local dir=$(dirname "$path")
    if [ ! -d "$dir" ] && [ $1 -eq 1 ]; then
        mkdir -p "$dir"
    fi
    echo "${path%/}"
}

# lists all available key files
_list() {
    local dir=$(_getPath 0 $1)
    for path in `find $dir -type f | sort`; do
        echo ${path#$dir/}
    done
}

# lists all available key files as tree
_tree() {
    local dir=$(_getPath 0 $1)
    tree -n --noreport $dir | sed '1d'
}

# gets a password into clipboard and show additional information
_get() {
    if [ $# -eq 0 ]; then
        die "No path given"
    fi

    local path=$(_getPath 1 $1)
    if [ ! -f "$path" ]; then
        die "File not found"
    fi

    # yank the pass word into the clipboard
    local data=$(gpg -q -d $path)
    if [ "$data" == "" ]; then
        exit 1
    fi
    local user=$(echo "$data" | sed -n '1p')
    local password=$(echo "$data" | sed -n '2p')
    local content=$(echo "$data" | sed -n '1,3!p')

    # yank the password into clipboard
    echo "$password" | xsel -i

    # clear clipboard after timeout
    sh -c "sleep $CLIPBOARD_TIMEOUT && echo | xsel -i" &

    cat <<EOM
New password copied to clipboard
You have $CLIPBOARD_TIMEOUT seconds...

--------------------------------
Additional data for user '$user':

$content

EOM
}

# adds an entry to the password file.
_add() {
    local path=$(_getPath 1 $1)

    local pass=''
    local pass2=''
    if [ $# -gt 1 ]; then
        user=$2
    else
        die "not enough arguments specified..."
    fi

    echo "Enter the password:"
    read -s pass

    echo "Enter the password again:"
    read -s pass2

    if [ "$pass" != "$pass2" ]; then
        die "Passwords did not match"
    fi

    echo ""
    echo "Write additional information"
    echo "End with CTRL-d"

    # read from stdin
    local content=''
    while read line
    do
        content=$(echo "$content\n$line")
    done
    local lines="$user\n$pass\n$content"

    echo -e "$lines" | gpg -e -r $GPGKEY > $path
}

ALLOWED_FUNKTIONS="add get help list tree"
if [[ $# -gt 0 && "$ALLOWED_FUNKTIONS" =~ (^| )"$1"($| ) ]]; then
    params="_$1"
    shift
else
    params='_help'
fi

umask 077 && eval "$params $@"
