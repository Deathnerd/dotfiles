#!/usr/bin/env bash
#
# Based on https://github.com/zant95/hosts-update
# Copyright (c) 2015 Héctor Molinero Fernández
# MIT License (MIT)

# exit on errors
set -eu
set -o pipefail

source functions.sh

# must be run as root
if (( EUID != 0 )); then
    die "You must be root to run this." 1
fi

# configuration
blocklist=''
dst_hosts="/etc/hosts"
dst_ip="127.0.0.1"
header="/etc/hostsblock/header"
blacklist="/etc/hostsblock/black.list"
whitelist="/etc/hostsblock/white.list"
sources=(
    'http://adaway.org/hosts.txt'
    'http://hosts-file.net/ad_servers.txt'
    'http://malwaredomains.lehigh.edu/files/justdomains'
    'http://pgl.yoyo.org/adservers/serverlist.php?hostformat=nohtml&mimetype=plaintext'
    'http://someonewhocares.org/hosts/hosts'
    'http://winhelp2002.mvps.org/hosts.txt'
    'http://www.malwaredomainlist.com/hostslist/hosts.txt'
)

# Process begins
message_head "Configuration"
write_info "Hosts location: $dst_hosts"
write_info "Destination IP: $dst_ip"

# read {black,white}lists
white=()
black=()
if [ -f "$whitelist" ]; then
    mapfile -t white < <(grep -v '^#' "$whitelist")
fi
if [ -f "$blacklist" ]; then
    mapfile -t black < <(grep -v '^#' "$blacklist")
fi

obtain_list_from_url() {
    local url="$1"
    local ip_regex='([0-9]{1,3}\.){3}[0-9]{1,3}[[:blank:]]+'
    local domain_regex='([[:alnum:]_-]{1,63}\.)+[[:alpha:]][[:alnum:]_-]{1,62}'
    local local_regex='(localhost|localhost\.localdomain|local|broadcasthost)'
	local content=$(curl -fsSL --connect-timeout 40 --max-time 120 "$url" |\
        sed 's/^M$//' |\
        grep -oE "(^($ip_regex)|^)$domain_regex" |\
        sed -r "s/^$ip_regex//g" |\
        awk '{print tolower($0)}' |\
        sed -r "/^$local_regex$/d")

	# Inform user if the download fails
	if [[ -z "$content" ]]; then
        return 1
	fi

    # remove empty lines
    content=$(echo "$content" | sed '/^$/d')

    echo "$content"
}

message_head 'Downloading lists'
# prepare some regex pattern
for url in "${sources[@]}"; do
    action_message "$url"
    content=$(obtain_list_from_url "$url")
	if [ $? -eq 0 ]; then
        blocklist=$(printf '%s\n%s\n' "$blocklist" "$content")
        action_status 0
    else
        action_status 1
	fi
	unset content
done

action_message "Apply whitelist"
if [[ ${#white[@]} -gt 0 ]]; then
    for domain in "${white[@]}"; do
        blocklist=$(printf '%s\n' "$blocklist" | sed -r "/^$domain$/d")
    done
fi
action_status 0

action_message "Apply blacklist"
if [[ ${#black[@]} -gt 0 ]]; then
    for domain in "${black[@]}"; do
        blocklist=$(printf '%s\n%s\n' "$blocklist" "$domain")
    done
fi
action_status 0

# sort the entries and remove duplicates
blocklist=$(printf '%s\n' "$blocklist" | sort -n | uniq)
# set the new destination ip
blocklist=$(printf '%s\n' "$blocklist" | sed "s/^/$dst_ip /g")
# generate the hosts file and write to disk
printf '%s\n\n%s\n' "$(< $header)" "$blocklist" | tee "$dst_hosts" > /dev/null

message_head "$(printf '%s\n' "$blocklist" | wc -l) hosts added!"
