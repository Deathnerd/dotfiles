#!/bin/env bash
# Extract tables from a MySQL dump from stdin to stdout.
# Base on idea of https://github.com/kedarvj/mysqldumpsplitter/

show_help() {
    cat << EOM
USAGE:   $(basename $0) [-s] -t PATTERN

OPTIONS
   -s           If given the output inset records are put on separate lines
                for easier filtering and lookup.
   -t PATTERN   Table name or sed compatible pattern to determining which
                table should be extracted.
                'cms_page'          get only this table
                'cms_.*'            get all tables starting with 'cms_'
                'cms_.*\|core_.*'   get all tables starting with 'cms_' or 'core_'
EOM
}

# Dumps the data from stdin and given name pattern to stdout.
dump_table() {
    local pattern="$1"
    # Get first 17 lines to get the meta information like timezone settings.
    # Then extract the table data and the outro data
    sed -n -e '1,17{p; b;}' \
        -e "/^-- Table structure for table \`\($pattern\)\`/,/^UNLOCK TABLES;/p" \
        -e '/^\/\*!40101 SET SQL_MODE/,$p'
}

split_insert() {
    sed -e 's/\(^INSERT INTO `.*` VALUES \)/\1\n/g' -e 's/),(/),\n(/g'
}

if [ $# -lt 1 ]; then
    show_help
    exit 2
fi

tpattern=""
split=0
while getopts "hst:" args; do
    case "$args" in
        h)  show_help
            exit 0 ;;
        s)  split=1 ;;
        t)  tpattern="$OPTARG" ;;
        \?) show_help
            exit 2 ;;
    esac
done

if [ $split -gt 0 ]; then
    dump_table "$tpattern" | split_insert
else
    dump_table "$tpattern"
fi
